name: Automated Versioning with Semantic Release

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: Detect Component Changes
    runs-on: ubuntu-latest
    outputs:
      components: ${{ steps.changes.outputs.components }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes per component
        id: changes
        run: |
          components=()

          # Get the last tag for each component or use initial commit if no tags exist
          get_last_tag() {
            local pattern=$1
            git describe --tags --abbrev=0 --match="$pattern" 2>/dev/null || git rev-list --max-parents=0 HEAD
          }

          # Check contracts
          last_contracts_tag=$(get_last_tag "contracts-v*")
          if git log --oneline --grep="^feat(contracts)" --grep="^fix(contracts)" --grep="^perf(contracts)" --grep="BREAKING CHANGE.*contracts" "$last_contracts_tag..HEAD" | grep -q .; then
            components+=("contracts")
          fi

          # Check SDK
          last_sdk_tag=$(get_last_tag "sdk-v*")
          if git log --oneline --grep="^feat(sdk)" --grep="^fix(sdk)" --grep="^perf(sdk)" --grep="BREAKING CHANGE.*sdk" "$last_sdk_tag..HEAD" | grep -q .; then
            components+=("sdk")
          fi

          # Check LTW Service
          last_ltw_tag=$(get_last_tag "ltw_service-v*")
          if git log --oneline --grep="^feat(ltw_service)" --grep="^fix(ltw_service)" --grep="^perf(ltw_service)" --grep="BREAKING CHANGE.*ltw_service" "$last_ltw_tag..HEAD" | grep -q .; then
            components+=("ltw_service")
          fi

          # Convert to JSON array
          if [ ${#components[@]} -eq 0 ]; then
            echo "components=[]" >> $GITHUB_OUTPUT
          else
            printf -v joined '"%s",' "${components[@]}"
            echo "components=[${joined%,}]" >> $GITHUB_OUTPUT
          fi

          echo "Detected components for release: ${components[*]}"

  release:
    name: Release Components
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.components != '[]'
    timeout-minutes: 15
    strategy:
      matrix:
        component: ${{ fromJson(needs.detect-changes.outputs.components) }}
      # Run sequentially to avoid git conflicts
      max-parallel: 1

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23.11.0"

      - name: Install semantic-release and plugins
        run: |
          npm install --no-save \
            semantic-release \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/exec \
            conventional-changelog-conventionalcommits

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create semantic-release config
        run: |
          node -e "
          const component = '${{ matrix.component }}';
          
          const configs = {
            contracts: {
              tagFormat: 'contracts-v\${version}',
              versionFile: 'contracts/shelter/Cargo.toml',
              changelogFile: 'contracts/CHANGELOG.md',
              versionPattern: 's/^version = \"[^\"]*\"/version = \"\${nextRelease.version}\"/'
            },
            sdk: {
              tagFormat: 'sdk-v\${version}',
              versionFile: 'sdk/package.json',
              changelogFile: 'sdk/CHANGELOG.md',
              versionPattern: 's/\"version\": \"[^\"]*\"/\"version\": \"\${nextRelease.version}\"/'
            },
            ltw_service: {
              tagFormat: 'ltw_service-v\${version}',
              versionFile: 'ltw_service/package.json',
              changelogFile: 'ltw_service/CHANGELOG.md',
              versionPattern: 's/\"version\": \"[^\"]*\"/\"version\": \"\${nextRelease.version}\"/'
            }
          };
          
          const config = configs[component];
          
          const releaseConfig = {
            tagFormat: config.tagFormat,
            branches: ['main'],
            plugins: [
              ['@semantic-release/commit-analyzer', {
                preset: 'conventionalcommits',
                releaseRules: [
                  {type: 'feat', scope: component, release: 'minor'},
                  {type: 'fix', scope: component, release: 'patch'},
                  {type: 'perf', scope: component, release: 'patch'},
                  {breaking: true, scope: component, release: 'major'}
                ],
                parserOpts: {
                  noteKeywords: ['BREAKING CHANGE', 'BREAKING CHANGES']
                }
              }],
              ['@semantic-release/release-notes-generator', {
                preset: 'conventionalcommits',
                presetConfig: {
                  types: [
                    {type: 'feat', scope: component, section: 'Features'},
                    {type: 'fix', scope: component, section: 'Bug Fixes'},
                    {type: 'perf', scope: component, section: 'Performance Improvements'}
                  ]
                }
              }],
              ['@semantic-release/changelog', {
                changelogFile: config.changelogFile
              }],
              ['@semantic-release/exec', {
                prepareCmd: \`sed -i '\${config.versionPattern}' \${config.versionFile}\`
              }],
              ['@semantic-release/git', {
                assets: [config.versionFile, config.changelogFile],
                message: \`chore(\${component}): release v\\\${nextRelease.version}\\n\\n\\\${nextRelease.notes}\`
              }],
              '@semantic-release/github'
            ]
          };
          
          require('fs').writeFileSync('.releaserc.json', JSON.stringify(releaseConfig, null, 2));
          console.log('Generated config for component:', component);
          console.log('Version file:', config.versionFile);
          console.log('Changelog file:', config.changelogFile);
          "

      - name: Verify version file exists
        run: |
          COMPONENT="${{ matrix.component }}"
          case "$COMPONENT" in
            "contracts")
              VERSION_FILE="contracts/shelter/Cargo.toml"
              ;;
            "sdk")
              VERSION_FILE="sdk/package.json"
              ;;
            "ltw_service")
              VERSION_FILE="ltw_service/package.json"
              ;;
          esac
          
          if [ ! -f "$VERSION_FILE" ]; then
            echo "Error: Version file $VERSION_FILE not found"
            exit 1
          fi

      - name: Debug configuration
        run: |
          echo "Component: ${{ matrix.component }}"
          echo "Generated .releaserc.json:"
          cat .releaserc.json

      - name: Pull latest changes
        run: |
          git pull origin main

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release
